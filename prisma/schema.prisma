// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  phone         String?
  dateOfBirth   DateTime? @map("date_of_birth")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  wishlistItems WishlistItem[]
  reviews       Review[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Address {
  id          String  @id @default(cuid())
  userId      String  @map("user_id")
  type        String  // 'home', 'work', 'other'
  firstName   String  @map("first_name")
  lastName    String  @map("last_name")
  company     String?
  address1    String  @map("address_1")
  address2    String? @map("address_2")
  city        String
  state       String?
  postalCode  String  @map("postal_code")
  country     String  @default("Rwanda")
  phone       String?
  isDefault   Boolean @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Order {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  orderNumber   String      @unique @map("order_number")
  status        OrderStatus @default(PENDING)
  subtotal      Int         // Amount in cents/smallest currency unit
  tax           Int         @default(0)
  shipping      Int         @default(0)
  discount      Int         @default(0)
  total         Int
  paymentMethod String?     @map("payment_method")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  addressId     String      @map("address_id")
  notes         String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  user      User        @relation(fields: [userId], references: [id])
  address   Address     @relation(fields: [addressId], references: [id])
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  quantity  Int
  price     Int      // Price at time of order
  createdAt DateTime @default(now()) @map("created_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model WishlistItem {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  productId    String   @map("product_id")
  productName  String   @map("product_name")
  productPrice Int      @map("product_price")
  productImage String?  @map("product_image")
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
